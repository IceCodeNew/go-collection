name: Bump

on:
  workflow_dispatch:
  schedule:
    - cron: "25 1-23/8 * * *"
  push:
    branches:
      - master
    paths-ignore:
      - "**/LICENSE"
      - "**/README.md"
      - "**/getting_start.sh"
  pull_request:
    branches:
      - master

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "Bump"
  Bump:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set some variables
        run: |
          echo "RELEASE_NAME=$(date +%Y%m%d%H%M%S)" >> $GITHUB_ENV
          echo "TAG_NAME=$(date +%Y%m%d%H%M%S)" >> $GITHUB_ENV
          echo "REPO_URL=github.com/${{ github.repository }}" >> $GITHUB_ENV
          echo "checksec_latest_tag_name=$(curl -sSL -H 'Accept: application/vnd.github.v3+json' \
                'https://api.github.com/repos/slimm609/checksec.sh/releases/latest' |
                grep -F 'tag_name' | cut -d'"' -f4)" >> $GITHUB_ENV
          echo "bashrc_latest_commit_hash=$(curl -sL -H 'Accept: application/vnd.github.v3+json' \
                'https://api.github.com/repos/IceCodeNew/myrc/commits?per_page=1&path=.bashrc' |
                grep -Fm1 'sha' | cut -d'"' -f4)" >> $GITHUB_ENV
          echo "github_release_latest_tag_name=$(curl -sSL -H 'Accept: application/vnd.github.v3+json' \
                'https://api.github.com/repos/github-release/github-release/releases/latest' |
                grep -F 'tag_name' | cut -d'"' -f4)" >> $GITHUB_ENV
          echo "got_latest_tag_name=$(curl -sSL -H 'Accept: application/vnd.github.v3+json' \
                'https://api.github.com/repos/melbahja/got/releases/latest' |
                grep -F 'tag_name' | cut -d'"' -f4)" >> $GITHUB_ENV
          echo "duf_latest_commit_hash=$(curl -sL -H 'Accept: application/vnd.github.v3+json' \
                'https://api.github.com/repos/muesli/duf/commits?per_page=1&path=go.mod' |
                grep -Fm1 'sha' | cut -d'"' -f4)" >> $GITHUB_ENV
          echo "shfmt_latest_commit_hash=$(curl -sL -H 'Accept: application/vnd.github.v3+json' \
                'https://api.github.com/repos/mvdan/sh/commits?per_page=1&path=go.mod' |
                grep -Fm1 'sha' | cut -d'"' -f4)" >> $GITHUB_ENV
          echo "croc_latest_commit_hash=$(curl -sL -H 'Accept: application/vnd.github.v3+json' \
                'https://api.github.com/repos/schollz/croc/commits?per_page=1&path=go.mod' |
                grep -Fm1 'sha' | cut -d'"' -f4)" >> $GITHUB_ENV
          echo "mosdns_latest_commit_hash=$(curl -sL -H 'Accept: application/vnd.github.v3+json' \
                'https://api.github.com/repos/IrineSistiana/mosdns/commits?per_page=1' |
                grep -Fm1 'sha' | cut -d'"' -f4)" >> $GITHUB_ENV
          echo "go_ss2_latest_commit_hash=$(curl -sL -H 'Accept: application/vnd.github.v3+json' \
                'https://api.github.com/repos/shadowsocks/go-shadowsocks2/commits?per_page=1' |
                grep -Fm1 'sha' | cut -d'"' -f4)" >> $GITHUB_ENV
          echo "chisel_latest_commit_hash=$(curl -sL -H 'Accept: application/vnd.github.v3+json' \
                'https://api.github.com/repos/jpillora/chisel/commits?per_page=1' |
                grep -Fm1 'sha' | cut -d'"' -f4)" >> $GITHUB_ENV
          echo "nali_latest_commit_hash=$(curl -sL -H 'Accept: application/vnd.github.v3+json' \
                'https://api.github.com/repos/zu1k/nali/commits?per_page=1&path=go.mod' |
                grep -Fm1 'sha' | cut -d'"' -f4)" >> $GITHUB_ENV
          echo "apk_file_latest_tag_name=$(curl -sSL -H 'Accept: application/vnd.github.v3+json' \
                'https://api.github.com/repos/genuinetools/apk-file/releases/latest' |
                grep -F 'tag_name' | cut -d'"' -f4)" >> $GITHUB_ENV
          echo "caddy_latest_commit_hash=$(curl -sL -H 'Accept: application/vnd.github.v3+json' \
                'https://api.github.com/repos/caddyserver/caddy/commits?per_page=1' |
                grep -Fm1 'sha' | cut -d'"' -f4)" >> $GITHUB_ENV
          echo "caddy_geoip_latest_commit_hash=$(curl -sL -H 'Accept: application/vnd.github.v3+json' \
                'https://api.github.com/repos/porech/caddy-maxmind-geolocation/commits?per_page=1' |
                grep -Fm1 'sha' | cut -d'"' -f4)" >> $GITHUB_ENV
          echo "caddy_l4_latest_commit_hash=$(curl -sL -H 'Accept: application/vnd.github.v3+json' \
                'https://api.github.com/repos/mholt/caddy-l4/commits?per_page=1' |
                grep -Fm1 'sha' | cut -d'"' -f4)" >> $GITHUB_ENV
          echo "httpstat_latest_commit_hash=$(curl -sL -H 'Accept: application/vnd.github.v3+json' \
                'https://api.github.com/repos/davecheney/httpstat/commits?per_page=1' |
                grep -Fm1 'sha' | cut -d'"' -f4)" >> $GITHUB_ENV
          echo "golang_latest_tag_name=$(for i in {1..16}; do \
                  if curl -sSL -H 'Accept: application/vnd.github.v3+json' \
                    "https://api.github.com/repos/golang/go/tags?per_page=100&page=$i" |
                    grep -F 'name' | cut -d'"' -f4 | grep -vE 'alpha|beta|rc|test|week' |
                    grep -Em1 '^go[0-9]+\.[0-9]+\.[0-9]+';
                  then break
                  fi
                done)" >> $GITHUB_ENV
          echo "build_base_date=$(TZ=':Asia/Taipei' date +%F)" >> $GITHUB_ENV
          echo "cachebust=$(date +%s)" >> $GITHUB_ENV
        shell: bash
      # Runs a set of commands using the runners shell
      - name: Bump
        run: |
          git config --local user.name "actions"
          git config --local user.email "action@github.com"
          git reset --hard origin/master
          sed -i -E "s/^ARG checksec_latest_tag_name=.+/ARG checksec_latest_tag_name=${checksec_latest_tag_name:?empty value}/" build_base.Dockerfile
          sed -i -E "s/^ARG bashrc_latest_commit_hash=.+/ARG bashrc_latest_commit_hash=${bashrc_latest_commit_hash:?empty value}/" build_base.Dockerfile
          sed -i -E "s/^ARG github_release_latest_tag_name=.+/ARG github_release_latest_tag_name=${github_release_latest_tag_name:?empty value}/" Dockerfile
          sed -i -E "s/^ARG got_latest_tag_name=.+/ARG got_latest_tag_name=${got_latest_tag_name:?empty value}/" Dockerfile
          sed -i -E "s/^ARG duf_latest_commit_hash=.+/ARG duf_latest_commit_hash=${duf_latest_commit_hash:?empty value}/" Dockerfile
          sed -i -E "s/^ARG shfmt_latest_commit_hash=.+/ARG shfmt_latest_commit_hash=${shfmt_latest_commit_hash:?empty value}/" Dockerfile
          sed -i -E "s/^ARG croc_latest_commit_hash=.+/ARG croc_latest_commit_hash=${croc_latest_commit_hash:?empty value}/" Dockerfile
          sed -i -E "s/^ARG mosdns_latest_commit_hash=.+/ARG mosdns_latest_commit_hash=${mosdns_latest_commit_hash:?empty value}/" Dockerfile
          sed -i -E "s/^ARG go_ss2_latest_commit_hash=.+/ARG go_ss2_latest_commit_hash=${go_ss2_latest_commit_hash:?empty value}/" Dockerfile
          sed -i -E "s/^ARG chisel_latest_commit_hash=.+/ARG chisel_latest_commit_hash=${chisel_latest_commit_hash:?empty value}/" Dockerfile
          sed -i -E "s/^ARG nali_latest_commit_hash=.+/ARG nali_latest_commit_hash=${nali_latest_commit_hash:?empty value}/" Dockerfile
          sed -i -E "s/^ARG apk_file_latest_tag_name=.+/ARG apk_file_latest_tag_name=${apk_file_latest_tag_name:?empty value}/" Dockerfile
          sed -i -E "s/^ARG caddy_latest_commit_hash=.+/ARG caddy_latest_commit_hash=${caddy_latest_commit_hash:?empty value}/" Dockerfile
          sed -i -E "s/^ARG caddy_geoip_latest_commit_hash=.+/ARG caddy_geoip_latest_commit_hash=${caddy_geoip_latest_commit_hash:?empty value}/" Dockerfile
          sed -i -E "s/^ARG caddy_l4_latest_commit_hash=.+/ARG caddy_l4_latest_commit_hash=${caddy_l4_latest_commit_hash:?empty value}/" Dockerfile
          sed -i -E "s/^ARG httpstat_latest_commit_hash=.+/ARG httpstat_latest_commit_hash=${httpstat_latest_commit_hash:?empty value}/" Dockerfile
          sed -i -E "s/^ARG golang_latest_tag_name=.+/ARG golang_latest_tag_name=${golang_latest_tag_name:?empty value}/" build_base.Dockerfile
          sed -i -E "s/^ARG build_base_date=.+/ARG build_base_date=${build_base_date:?empty value}/" build_base.Dockerfile
          sed -i -E "s/^ARG cachebust=.+/ARG cachebust=${cachebust:?empty value}/" Dockerfile
          git add Dockerfile build_base.Dockerfile
          git commit -m "Bump"
          git push -u origin master
      - name: Force push `release` branch
        run: |
          git config --local user.name "actions"
          git config --local user.email "action@github.com"
          git checkout release
          git reset --hard origin/master
          git rm getting_start.sh
          git rm release.Dockerfile
          git rm -r .github
          git commit -m "${{ env.RELEASE_NAME }}"
          git push -f -u origin release
